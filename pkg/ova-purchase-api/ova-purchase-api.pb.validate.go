// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ova-purchase-api/ova-purchase-api.proto

package ova_purchase_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreatePurchaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePurchaseRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetItems()) < 1 {
		return CreatePurchaseRequestValidationError{
			field:  "Items",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePurchaseRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreatePurchaseRequestValidationError is the validation error returned by
// CreatePurchaseRequest.Validate if the designated constraints aren't met.
type CreatePurchaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePurchaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePurchaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePurchaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePurchaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePurchaseRequestValidationError) ErrorName() string {
	return "CreatePurchaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePurchaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePurchaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePurchaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePurchaseRequestValidationError{}

// Validate checks the field values on DescribePurchaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribePurchaseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DescribePurchaseRequestValidationError is the validation error returned by
// DescribePurchaseRequest.Validate if the designated constraints aren't met.
type DescribePurchaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePurchaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePurchaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePurchaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePurchaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePurchaseRequestValidationError) ErrorName() string {
	return "DescribePurchaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePurchaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePurchaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePurchaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePurchaseRequestValidationError{}

// Validate checks the field values on DescribePurchaseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribePurchaseResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DescribePurchaseResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribePurchaseResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribePurchaseResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	return nil
}

// DescribePurchaseResponseValidationError is the validation error returned by
// DescribePurchaseResponse.Validate if the designated constraints aren't met.
type DescribePurchaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePurchaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePurchaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePurchaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePurchaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePurchaseResponseValidationError) ErrorName() string {
	return "DescribePurchaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePurchaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePurchaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePurchaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePurchaseResponseValidationError{}

// Validate checks the field values on ListPurchasesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPurchasesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Offset

	// no validation rules for Limit

	return nil
}

// ListPurchasesRequestValidationError is the validation error returned by
// ListPurchasesRequest.Validate if the designated constraints aren't met.
type ListPurchasesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPurchasesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPurchasesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPurchasesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPurchasesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPurchasesRequestValidationError) ErrorName() string {
	return "ListPurchasesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPurchasesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPurchasesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPurchasesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPurchasesRequestValidationError{}

// Validate checks the field values on Purchase with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Purchase) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PurchaseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurchaseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	return nil
}

// PurchaseValidationError is the validation error returned by
// Purchase.Validate if the designated constraints aren't met.
type PurchaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurchaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurchaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurchaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurchaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurchaseValidationError) ErrorName() string { return "PurchaseValidationError" }

// Error satisfies the builtin error interface
func (e PurchaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurchaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurchaseValidationError{}

// Validate checks the field values on ListPurchasesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPurchasesResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	for idx, item := range m.GetPurchases() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPurchasesResponseValidationError{
					field:  fmt.Sprintf("Purchases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPurchasesResponseValidationError is the validation error returned by
// ListPurchasesResponse.Validate if the designated constraints aren't met.
type ListPurchasesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPurchasesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPurchasesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPurchasesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPurchasesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPurchasesResponseValidationError) ErrorName() string {
	return "ListPurchasesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPurchasesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPurchasesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPurchasesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPurchasesResponseValidationError{}

// Validate checks the field values on RemovePurchaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemovePurchaseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// RemovePurchaseRequestValidationError is the validation error returned by
// RemovePurchaseRequest.Validate if the designated constraints aren't met.
type RemovePurchaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePurchaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePurchaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePurchaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePurchaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePurchaseRequestValidationError) ErrorName() string {
	return "RemovePurchaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePurchaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePurchaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePurchaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePurchaseRequestValidationError{}

// Validate checks the field values on MultiCreatePurchaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreatePurchaseRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetPurchases()) < 1 {
		return MultiCreatePurchaseRequestValidationError{
			field:  "Purchases",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetPurchases() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreatePurchaseRequestValidationError{
					field:  fmt.Sprintf("Purchases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreatePurchaseRequestValidationError is the validation error returned
// by MultiCreatePurchaseRequest.Validate if the designated constraints aren't met.
type MultiCreatePurchaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreatePurchaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreatePurchaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreatePurchaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreatePurchaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreatePurchaseRequestValidationError) ErrorName() string {
	return "MultiCreatePurchaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreatePurchaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreatePurchaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreatePurchaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreatePurchaseRequestValidationError{}

// Validate checks the field values on MultiCreatePurchaseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreatePurchaseResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MultiCreatePurchaseResponseValidationError is the validation error returned
// by MultiCreatePurchaseResponse.Validate if the designated constraints
// aren't met.
type MultiCreatePurchaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreatePurchaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreatePurchaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreatePurchaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreatePurchaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreatePurchaseResponseValidationError) ErrorName() string {
	return "MultiCreatePurchaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreatePurchaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreatePurchaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreatePurchaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreatePurchaseResponseValidationError{}

// Validate checks the field values on UpdatePurchaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePurchaseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if len(m.GetItems()) < 1 {
		return UpdatePurchaseRequestValidationError{
			field:  "Items",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdatePurchaseRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpdatePurchaseRequestValidationError is the validation error returned by
// UpdatePurchaseRequest.Validate if the designated constraints aren't met.
type UpdatePurchaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePurchaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePurchaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePurchaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePurchaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePurchaseRequestValidationError) ErrorName() string {
	return "UpdatePurchaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePurchaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePurchaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePurchaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePurchaseRequestValidationError{}

// Validate checks the field values on CreatePurchaseRequest_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePurchaseRequest_Item) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		return CreatePurchaseRequest_ItemValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if m.GetPrice() <= 0 {
		return CreatePurchaseRequest_ItemValidationError{
			field:  "Price",
			reason: "value must be greater than 0",
		}
	}

	if m.GetQuantity() <= 0 {
		return CreatePurchaseRequest_ItemValidationError{
			field:  "Quantity",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// CreatePurchaseRequest_ItemValidationError is the validation error returned
// by CreatePurchaseRequest_Item.Validate if the designated constraints aren't met.
type CreatePurchaseRequest_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePurchaseRequest_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePurchaseRequest_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePurchaseRequest_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePurchaseRequest_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePurchaseRequest_ItemValidationError) ErrorName() string {
	return "CreatePurchaseRequest_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePurchaseRequest_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePurchaseRequest_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePurchaseRequest_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePurchaseRequest_ItemValidationError{}

// Validate checks the field values on DescribePurchaseResponse_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribePurchaseResponse_Item) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Price

	// no validation rules for Quantity

	return nil
}

// DescribePurchaseResponse_ItemValidationError is the validation error
// returned by DescribePurchaseResponse_Item.Validate if the designated
// constraints aren't met.
type DescribePurchaseResponse_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribePurchaseResponse_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribePurchaseResponse_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribePurchaseResponse_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribePurchaseResponse_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribePurchaseResponse_ItemValidationError) ErrorName() string {
	return "DescribePurchaseResponse_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e DescribePurchaseResponse_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribePurchaseResponse_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribePurchaseResponse_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribePurchaseResponse_ItemValidationError{}

// Validate checks the field values on Purchase_Item with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Purchase_Item) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Price

	// no validation rules for Quantity

	return nil
}

// Purchase_ItemValidationError is the validation error returned by
// Purchase_Item.Validate if the designated constraints aren't met.
type Purchase_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Purchase_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Purchase_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Purchase_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Purchase_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Purchase_ItemValidationError) ErrorName() string { return "Purchase_ItemValidationError" }

// Error satisfies the builtin error interface
func (e Purchase_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchase_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Purchase_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Purchase_ItemValidationError{}

// Validate checks the field values on UpdatePurchaseRequest_Item with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePurchaseRequest_Item) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return UpdatePurchaseRequest_ItemValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		return UpdatePurchaseRequest_ItemValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if m.GetPrice() <= 0 {
		return UpdatePurchaseRequest_ItemValidationError{
			field:  "Price",
			reason: "value must be greater than 0",
		}
	}

	if m.GetQuantity() <= 0 {
		return UpdatePurchaseRequest_ItemValidationError{
			field:  "Quantity",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// UpdatePurchaseRequest_ItemValidationError is the validation error returned
// by UpdatePurchaseRequest_Item.Validate if the designated constraints aren't met.
type UpdatePurchaseRequest_ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePurchaseRequest_ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePurchaseRequest_ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePurchaseRequest_ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePurchaseRequest_ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePurchaseRequest_ItemValidationError) ErrorName() string {
	return "UpdatePurchaseRequest_ItemValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePurchaseRequest_ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePurchaseRequest_Item.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePurchaseRequest_ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePurchaseRequest_ItemValidationError{}
