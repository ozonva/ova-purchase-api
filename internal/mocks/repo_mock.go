// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repo/repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	purchase "github.com/ozonva/ova-purchase-api/internal/purchase"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddPurchases mocks base method.
func (m *MockRepo) AddPurchases(purchases []purchase.Purchase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPurchases", purchases)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPurchases indicates an expected call of AddPurchases.
func (mr *MockRepoMockRecorder) AddPurchases(purchases interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPurchases", reflect.TypeOf((*MockRepo)(nil).AddPurchases), purchases)
}

// DescribePurchase mocks base method.
func (m *MockRepo) DescribePurchase(purchaseId uint64) (*purchase.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribePurchase", purchaseId)
	ret0, _ := ret[0].(*purchase.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribePurchase indicates an expected call of DescribePurchase.
func (mr *MockRepoMockRecorder) DescribePurchase(purchaseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribePurchase", reflect.TypeOf((*MockRepo)(nil).DescribePurchase), purchaseId)
}

// ListPurchases mocks base method.
func (m *MockRepo) ListPurchases(limit, offset uint64) ([]purchase.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPurchases", limit, offset)
	ret0, _ := ret[0].([]purchase.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPurchases indicates an expected call of ListPurchases.
func (mr *MockRepoMockRecorder) ListPurchases(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPurchases", reflect.TypeOf((*MockRepo)(nil).ListPurchases), limit, offset)
}
